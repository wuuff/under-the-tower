#include "dungeon.h"
#include "overworld.h"

int8_t transition = 0;

//up,down,left,right
//1,none,2

uint8_t player_moving = 0;

const uint8_t player_sprites[] PROGMEM = {
// Up
8,8,
B00011000,
B01100110,
B10000001,
B10000001,
B01000010,
B10111100,
B01011010,
B00100001,
8,8,
B00011000,
B01100110,
B10000001,
B10000001,
B01000010,
B00111100,
B11011011,
B00100100,
8,8,
B00011000,
B01100110,
B10000001,
B10000001,
B01000010,
B00111101,
B01011010,
B10000100,
// Down
8,8,
B00011000,
B01100110,
B10000001,
B10100101,
B01000010,
B10111100,
B01011010,
B00100001,
8,8,
B00011000,
B01100110,
B10000001,
B10100101,
B01000010,
B00111100,
B11011011,
B00100100,
8,8,
B00011000,
B01100110,
B10000001,
B10100101,
B01000010,
B00111101,
B01011010,
B10000100,
// Left
8,8,
B00011000,
B01100110,
B10000001,
B10100001,
B01000010,
B00111100,
B01011010,
B00010100,
8,8,
B00011000,
B01100110,
B10000001,
B10100001,
B01000010,
B00111100,
B01011010,
B00100100,
8,8,
B00011000,
B01100110,
B10000001,
B10100001,
B01000010,
B00111100,
B01011010,
B00101000,
// Right
8,8,
B00011000,
B01100110,
B10000001,
B10000101,
B01000010,
B00111100,
B01011010,
B00101000,
8,8,
B00011000,
B01100110,
B10000001,
B10000101,
B01000010,
B00111100,
B01011010,
B00100100,
8,8,
B00011000,
B01100110,
B10000001,
B10000101,
B01000010,
B00111100,
B01011010,
B00010100,
};

const byte tiles[] PROGMEM = {
  8,8,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
B00000000,
8,8,
B00100010,
B11111111,
B10001000,
B11111111,
B00100010,
B11111111,
B10001000,
B11111111,
8,8,
B10000001,
B10000001,
B10000001,
B11111111,
B10000001,
B10000001,
B10000001,
B11111111,
8,8,
B00011000,
B01100110,
B10000001,
B11111111,
B10000001,
B10000001,
B11011011,
B11111111,
8,8,
B11111111,
B10000001,
B10000001,
B10000001,
B11000001,
B10000001,
B10000001,
B10000001,
8,8,
B00111100,
B01111110,
B11111111,
B11111111,
B11111111,
B10000101,
B01010110,
B01010010,
8,8,
B00111100,
B01111110,
B11111111,
B11111111,
B11111111,
B10010001,
B01010110,
B01000110,
8,8,
B01010010,
B01000010,
B01000010,
B01001010,
B01001010,
B01001010,
B01000010,
B01010010,
8,8,
B01000110,
B01010010,
B01010010,
B01010010,
B01000010,
B01001010,
B01001010,
B01001010,
8,8,
B00111010,
B11111111,
B10011000,
B11111111,
B00111010,
B11111111,
B10011000,
B11111111,
8,8,
B00000000,
B11111111,
B10101010,
B01010101,
B00000000,
B10101010,
B01010101,
B11111111,
8,8,
B00111100,
B01100110,
B11111111,
B10100101,
B10100101,
B11111111,
B01100110,
B00111100,
8,8,
B00100010,
B01100110,
B10001000,
B10011001,
B00100010,
B01100110,
B10001000,
B10011001,
8,8,
B00100010,
B01010100,
B10001000,
B00010101,
B00100010,
B01010100,
B10001000,
B00010101,
8,8,
B00111010,
B11111111,
B10100100,
B11100111,
B00100110,
B11100111,
B10011000,
B11111111,
8,8,
B00100010,
B01010101,
B10001000,
B01010101,
B00100010,
B01010101,
B10001000,
B01010101,
8,8,
B00100010,
B01010101,
B00000000,
B01010101,
B00100010,
B01010101,
B00000000,
B01010101,
8,8,
B00000000,
B00100000,
B01011100,
B00000000,
B00000000,
B00000100,
B00011010,
B00000000,
8,8,
B00000000,
B00000001,
B11100010,
B00000000,
B00000000,
B10000000,
B01000011,
B00000000,
8,8,
B11111111,
B10011001,
B10011001,
B11111111,
B10011001,
B10011001,
B11111111,
B11111111,
8,8,
B11111111,
B01010101,
B00110110,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
8,8,
B10000000,
B10010000,
B10101100,
B10000000,
B10000000,
B10000100,
B10111010,
B10000000,
8,8,
B10000000,
B10000100,
B10111010,
B10000000,
B10000000,
B10010000,
B10101100,
B10000000,
8,8,
B00000010,
B00011101,
B00000000,
B00001000,
B01110100,
B00000000,
B00000000,
B11111111,
8,8,
B00100000,
B01011100,
B00000000,
B00000100,
B00001011,
B00000000,
B00000000,
B11111111,
8,8,
B11111111,
B10001001,
B10010001,
B10100011,
B11000101,
B10001001,
B10010001,
B11111111,
8,8,
B00000000,
B11111111,
B10100001,
B10011001,
B11000101,
B10100011,
B10011001,
B11111111,
8,8,
B00000001,
B00000001,
B00000001,
B11111111,
B00010000,
B00010000,
B00010000,
B11111111,
8,8,
B00000000,
B00000000,
B00000000,
B11111111,
B00000000,
B00000000,
B00000000,
B11111111,
8,8,
B00000000,
B00000011,
B00001100,
B11110000,
B11000000,
B00000000,
B00000000,
B00000000,
8,8,
B00000000,
B00000000,
B00000000,
B11111111,
B00000001,
B00001110,
B01110000,
B10000000,
8,8,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
B11111111,
8,8,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
B00010100,
8,8,
B00000000,
B00000000,
B01011000,
B01100110,
B10111010,
B10111101,
B11100011,
B11111111,
8,8,
B00000000,
B00000100,
B01011010,
B00110010,
B01100110,
B00111011,
B01100110,
B00010000,
8,8,
B00011000,
B11011011,
B11000011,
B00001000,
B11011110,
B11011110,
B00011100,
B00000000,
8,8,
B00011000,
B00011000,
B00011000,
B11111111,
B11111111,
B00011000,
B00011000,
B00011000,
8,8,
B00000011,
B00001100,
B00110000,
B11010000,
B00010011,
B00011101,
B00110001,
B11000001,
8,8,
B11000000,
B00110000,
B00001100,
B00001011,
B11001000,
B10111000,
B10001100,
B10000011,
8,8,
B00000011,
B00001100,
B00110000,
B11010000,
B00010011,
B00011100,
B00110000,
B11000000,
8,8,
B00000011,
B00001100,
B00110000,
B11000000,
B00000000,
B00000000,
B00000000,
B00000000,
8,8,
B11000000,
B00110000,
B00001100,
B00001011,
B11001000,
B00111000,
B00001100,
B00000011,
8,8,
B11000000,
B00110000,
B00001100,
B00000011,
B00000000,
B00000000,
B00000000,
B00000000,
8,8,
B10000000,
B10010000,
B10101110,
B10000000,
B10001000,
B10110100,
B10000000,
B11111111,
8,8,
B10000000,
B10000100,
B10011010,
B10000000,
B10010000,
B10101110,
B10000000,
B11111111,
8,8,
B11111111,
B11010101,
B10110110,
B10010100,
B10010100,
B10010100,
B10010100,
B10010100,
8,8,
B00000000,
B00000000,
B00000000,
B11111111,
B10000000,
B01110000,
B00001110,
B11111111,
8,8,
B00000000,
B11000000,
B00110000,
B00001111,
B00000011,
B00000000,
B00000000,
B11111111,
8,8,
B00010000,
B00001000,
B00001000,
B00010000,
B00001000,
B00001000,
B00000100,
B00001000,
8,8,
B00000000,
B00000000,
B00011000,
B00100100,
B00010011,
B00010000,
B00001000,
B00010000,
8,8,
B00000000,
B00000000,
B00001100,
B10010010,
B01100001,
B00000000,
B00000000,
B00000000,
8,8,
B00000000,
B00000000,
B00011000,
B00100100,
B11000010,
B00000100,
B00001000,
B00010000,
8,8,
B00001000,
B00010000,
B00010000,
B00001000,
B00000100,
B00001000,
B00010000,
B00001000,
8,8,
B00010000,
B00001000,
B00000100,
B00001000,
B11000100,
B00100010,
B00011100,
B00000000,
8,8,
B00000000,
B00000000,
B00000000,
B01101001,
B10010110,
B00000000,
B00000000,
B00000000,
8,8,
B00010000,
B00100000,
B00100000,
B01000001,
B00100010,
B00011010,
B00000100,
B00000000,
};

const byte world[] PROGMEM = {
11,15,1,2,5,15,1,2,3,1,4,38,8,27,4,37,5,1,1,2,1,1,1,2,13,1,1,2,
5,17,11,1,1,2,5,1,1,2,3,1,4,38,1,27,1,11,4,27,1,11,1,27,4,37,5,1,1,2,1,1,1,2,13,1,1,2,
5,17,7,1,1,19,1,1,1,19,1,1,1,2,1,1,1,19,1,1,1,19,1,1,1,2,3,1,4,38,8,27,4,37,5,1,1,2,1,1,1,2,5,1,2,19,6,1,1,2,
5,17,10,1,1,14,1,2,1,14,3,1,1,14,1,2,1,1,1,14,1,1,4,38,1,27,1,11,4,27,1,11,1,27,4,37,5,1,1,2,1,1,1,2,1,1,1,14,1,1,1,14,1,1,2,19,1,1,1,14,4,1,1,2,
5,17,8,1,1,4,1,1,1,9,1,2,1,9,1,1,1,4,1,1,1,9,1,2,1,1,1,9,1,1,4,38,8,27,4,37,1,1,1,14,1,1,1,14,1,1,1,2,1,0,1,2,1,1,1,9,1,1,1,9,4,1,1,9,1,1,1,4,2,1,1,2,
5,17,11,0,1,32,9,0,4,38,1,27,1,11,4,27,1,11,1,27,4,37,1,1,1,9,1,1,1,9,1,1,1,2,16,0,1,21,
4,17,11,0,1,32,9,0,4,38,8,27,4,37,21,0,1,26,1,21,
4,17,11,10,1,3,5,10,1,3,3,0,4,38,1,27,1,11,4,27,1,11,1,27,4,37,6,0,1,3,12,10,1,3,1,0,1,25,1,21,
4,17,11,15,1,2,5,15,1,2,3,0,4,38,8,27,4,37,6,0,1,2,12,15,1,2,2,0,1,21,
4,17,11,15,1,2,5,15,1,2,3,0,4,38,1,27,1,11,4,27,1,11,1,27,4,37,4,0,1,3,1,10,1,2,12,15,1,2,1,10,1,3,
5,17,11,1,1,2,5,1,1,2,3,0,4,38,8,27,4,37,4,0,1,32,1,27,1,2,12,27,1,2,1,27,1,32,
5,17,11,1,1,2,1,1,1,19,1,1,1,19,1,1,1,2,3,0,4,38,1,27,1,11,4,27,1,11,1,27,4,37,4,0,1,32,1,27,1,2,1,27,1,19,1,27,1,19,4,27,1,19,1,27,1,19,1,27,1,2,1,27,1,32,
5,17,11,1,1,2,1,14,3,1,1,14,1,2,3,0,4,38,8,27,4,37,4,0,1,32,1,0,1,2,12,27,1,2,1,0,1,32,
5,17,11,1,1,2,1,9,1,1,1,4,1,1,1,9,1,2,3,0,4,38,1,27,1,11,4,27,1,11,1,27,4,37,4,0,1,32,1,0,1,2,1,27,1,19,1,27,1,19,4,27,1,19,1,27,1,19,1,27,1,2,1,0,1,32,
5,17,15,0,1,32,5,0,4,38,8,27,4,37,4,0,1,32,1,0,1,2,12,27,1,2,1,0,1,32,
5,17,15,0,1,32,5,0,1,42,1,41,2,38,1,27,1,11,4,27,1,11,1,27,1,39,1,37,1,39,1,40,4,0,1,32,1,0,1,2,1,27,1,19,1,27,1,19,1,36,2,27,1,36,1,19,1,27,1,19,1,27,1,2,1,0,1,32,
5,17,17,10,1,3,5,0,1,42,1,41,3,27,2,4,3,27,1,39,1,40,6,0,1,32,1,0,1,2,5,27,2,4,5,27,1,2,1,0,1,32,
5,17,17,15,1,2,23,0,1,32,16,0,1,32,
5,17,3,10,1,3,13,15,1,2,3,0,1,26,19,0,1,32,16,0,1,32,
5,17,3,12,1,2,4,1,1,3,3,10,1,3,4,1,1,2,3,0,1,25,5,0,1,26,13,0,1,32,6,0,1,36,2,0,1,36,6,0,1,32,
5,17,3,12,1,2,4,1,1,2,3,12,1,2,2,1,1,19,1,1,1,2,9,0,1,25,1,26,7,0,1,26,4,0,1,3,6,10,1,3,2,0,1,3,6,10,1,3,
5,17,3,1,1,2,4,10,1,2,3,12,1,2,4,1,1,2,10,0,1,25,6,0,1,26,1,25,4,0,1,2,6,27,1,2,2,0,1,2,6,27,1,2,
5,17,3,1,1,2,4,1,1,2,1,19,1,1,1,19,1,2,2,1,1,19,1,1,1,2,17,0,1,25,5,0,1,2,6,27,1,2,2,0,1,2,6,27,1,2,
5,17,3,1,1,2,4,1,1,2,1,1,1,35,1,1,1,2,4,1,1,2,40,0,1,26,
5,17,5,10,1,3,2,0,1,2,1,19,1,4,1,19,1,3,16,10,1,3,27,0,1,26,1,25,
5,17,5,12,1,2,6,0,1,2,16,13,1,2,1,3,2,10,1,3,23,0,2,25,
5,17,5,12,1,2,6,0,1,2,16,13,2,2,2,1,1,2,1,3,11,10,1,3,4,0,1,3,6,10,1,3,
5,17,5,1,1,2,6,0,1,2,4,19,3,27,4,19,3,27,2,19,2,2,2,1,2,2,11,13,1,2,4,0,1,2,6,12,1,2,
5,17,5,1,1,2,6,0,1,2,16,27,1,2,4,0,1,2,11,13,1,2,1,3,2,0,1,3,1,2,6,12,1,2,
5,17,2,1,1,5,1,1,1,5,1,2,6,0,1,2,4,19,13,27,4,0,1,2,11,1,2,2,2,0,2,2,6,1,1,2,
5,17,2,1,1,7,1,1,1,7,1,2,1,54,1,3,2,0,1,3,1,50,2,54,1,50,1,51,18,0,1,2,3,1,1,19,2,1,1,19,2,1,1,19,1,1,1,2,4,0,1,2,1,1,1,19,2,1,1,19,1,1,1,2,
12,17,1,32,2,0,1,32,4,17,1,55,1,51,17,0,1,2,1,1,1,4,9,1,1,2,4,0,1,2,2,1,1,4,3,1,1,2,
12,17,1,3,2,0,1,3,5,17,1,48,1,3,13,10,7,0,1,3,20,0,1,21,
4,17,2,54,1,50,1,54,1,50,2,54,1,2,2,0,1,2,1,54,1,50,1,51,2,17,1,48,1,2,13,13,7,0,1,3,20,0,1,21,
4,17,6,10,1,3,6,0,1,48,2,17,1,52,1,2,13,13,7,0,1,3,20,0,1,21,
4,17,6,12,1,2,6,0,1,48,2,17,1,52,1,2,13,27,7,0,1,3,20,0,1,21,
4,17,6,12,1,2,6,0,1,52,2,17,1,52,1,2,11,27,1,3,10,10,1,3,4,0,1,45,13,20,
5,17,6,1,1,2,6,0,1,52,2,17,1,52,1,2,1,19,3,27,1,19,3,27,1,19,2,27,1,2,10,13,1,2,4,0,1,21,
18,17,1,1,4,19,1,1,1,2,6,0,1,48,2,17,1,48,1,2,11,27,1,2,10,13,1,2,4,0,1,21,6,17,1,20,4,17,1,20,3,17,1,20,
2,17,6,1,1,2,6,0,1,3,2,10,1,3,12,0,1,2,10,1,1,2,4,0,1,21,6,17,1,20,4,17,1,20,3,17,1,20,
2,17,5,10,1,3,7,0,1,2,2,1,1,2,12,0,1,2,10,1,1,2,4,0,1,43,3,23,3,17,1,32,4,17,1,32,3,17,1,32,
2,17,5,12,1,2,12,0,1,3,7,10,1,3,2,0,1,2,10,1,1,2,6,0,1,26,1,0,1,21,2,23,1,31,4,23,1,31,3,23,1,31,
2,23,5,12,1,2,7,0,1,3,2,10,1,3,1,0,1,2,7,12,1,2,2,0,1,2,10,1,1,2,6,0,1,25,1,0,1,43,1,47,1,46,4,28,1,4,3,28,1,11,1,28,1,30,
1,29,5,1,1,2,1,0,1,3,3,10,1,3,1,0,1,2,2,1,1,2,1,0,1,2,7,1,1,2,4,0,1,3,4,10,1,3,7,10,1,3,9,0,1,26,4,0,1,28,1,30,1,29,
2,17,2,1,2,19,1,1,1,2,1,0,1,2,3,12,1,2,1,0,1,2,2,17,1,2,1,0,1,2,1,5,1,1,1,5,1,1,1,5,1,1,1,5,1,2,4,0,1,2,4,12,1,2,7,13,1,2,6,0,1,26,2,0,1,25,1,26,3,0,1,21,
4,17,2,1,2,19,1,1,1,2,1,0,1,2,3,1,1,2,1,49,1,53,2,17,1,48,1,0,1,2,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,2,4,0,1,2,4,12,1,2,7,13,1,2,6,0,1,25,1,26,2,0,1,25,2,0,1,26,1,21,
4,17,5,10,1,3,1,0,1,2,1,5,1,1,1,5,1,2,1,48,3,17,1,55,1,50,1,2,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,2,1,51,3,0,1,2,4,1,1,2,7,1,1,2,6,0,2,25,5,0,1,25,1,21,
4,17,5,12,1,2,1,0,1,2,1,7,1,1,1,7,1,2,1,53,14,17,1,55,1,51,2,0,1,2,4,1,1,2,2,19,3,1,2,19,1,2,4,0,1,45,9,20,
5,17,5,12,1,2,1,0,1,52,20,17,1,55,1,51,1,0,1,2,4,1,1,2,3,1,1,4,3,1,1,2,4,0,1,21,
14,17,5,1,1,2,1,0,1,48,9,17,1,49,1,50,1,54,1,51,8,17,1,52,19,0,1,21,
14,17,2,1,2,19,1,1,1,2,1,0,1,55,1,54,1,51,7,17,1,48,2,0,1,55,1,51,7,17,1,55,1,54,1,51,3,0,1,3,8,10,1,3,4,0,1,21,11,23,
3,17,2,1,2,19,1,1,1,2,3,0,1,55,1,50,1,54,1,50,1,54,1,50,1,54,1,50,1,53,3,0,1,55,1,54,1,50,1,54,1,50,1,51,4,17,1,48,3,0,1,2,8,13,1,2,4,0,1,43,1,47,1,46,5,28,1,4,1,28,1,30,1,29,
3,17,5,1,1,2,6,0,1,33,1,34,1,0,1,34,3,0,1,34,4,0,1,34,1,0,1,48,4,17,1,52,3,0,1,2,8,13,1,2,14,0,1,21,
4,17,8,10,1,3,3,0,1,33,4,0,1,34,1,33,3,0,1,34,3,0,1,48,4,17,1,48,3,0,1,2,8,1,1,2,14,0,1,21,
4,17,8,12,1,2,4,0,1,34,2,0,1,34,7,0,1,33,1,34,1,48,4,17,1,3,3,0,1,2,8,1,1,2,4,0,1,45,9,20,
5,17,8,12,1,2,3,0,1,34,3,0,1,34,1,0,1,34,4,0,1,33,2,0,1,55,1,51,3,17,1,32,3,0,1,2,1,1,1,14,5,1,1,14,1,2,4,0,1,21,7,17,1,26,
6,17,8,1,1,2,3,0,1,33,4,0,1,33,3,0,1,34,1,0,1,34,3,0,1,48,3,17,1,3,3,0,1,2,1,1,1,9,2,1,1,4,2,1,1,9,1,2,4,0,1,43,6,23,1,26,1,25,1,26,
5,17,8,1,1,2,2,0,1,33,4,0,1,34,3,0,1,33,1,0,1,34,4,0,1,52,3,17,1,32,24,0,3,25,1,21,
4,17,5,1,1,5,1,1,1,5,1,2,5,0,1,49,2,54,1,51,7,0,1,34,1,49,1,53,3,17,1,3,1,0,1,3,1,0,1,3,1,0,1,3,1,0,1,3,1,0,1,3,1,0,1,3,1,0,1,3,1,0,1,3,11,0,1,21,
4,17,5,1,1,7,1,1,1,7,1,2,2,54,1,50,1,54,1,50,1,53,2,17,1,55,2,50,1,54,2,50,1,54,2,50,1,53,4,17,1,2,1,20,1,2,1,20,1,2,1,20,1,2,1,20,1,2,1,20,1,2,1,20,1,2,1,20,1,2,1,20,1,2,11,20,
255,17,6,17,
};

#define COMPRESSED_SIZE 2652
//Keep track of this outside the function so we can search incrementally 
uint16_t world_ndx = 0; 
uint16_t world_cnt = 0;
//The world is now run-length encoded to save space, so this function is
//needed to retrieve the actual values for each tile in the map.  This
//can cause substantial overhead, so I keep track of the current index
//globally so that looping accesses to incremental indices don't have to
//loop far at all.
uint8_t world_get(uint16_t index){
  uint8_t curr = 0;
  uint8_t count = 0;

  //Check our global status; if we have already passed the tile, start over
  if( world_cnt > index ){
    world_ndx = 0;
    world_cnt = 0;
  }
  
  for(; world_ndx < COMPRESSED_SIZE; world_ndx += 2){
    curr = pgm_read_byte(&world[world_ndx+1]); //Get tile type
    count = pgm_read_byte(&world[world_ndx]); //Get tile count
    world_cnt += count;
    if( world_cnt > index ){ //If we have now encountered that index
      world_cnt -= count; //Roll back so we can quickly get a tile from the same block
      return curr;
    }
  }
}

uint16_t dudex = 25*8;//10*8;//37*8;//25*8;//8*8;//25*8;
uint16_t dudey = 57*8;//26*8;//49*8;//57*8;//27*8;//57*8;

byte dudeanimation = DOWN;
byte dudeframe = 0;

byte worldframe = 0;

void draw_world(){
  uint8_t tile;
  //gb.display.println(dudex/8 - 6);
  //gb.display.println(dudey/8 - 4);
  //Signed because we may seek off the edge of the map
  for( int8_t y = dudey/8 - 4; y <= dudey/8 + 4; y++ ){
    for( int8_t x = dudex/8 - 6; x <= dudex/8 + 6; x++ ){
      //Draw the tile at the relative distance from the player
      tile = world_get(y*64+x);
      switch( tile ){
        case DRAIN:
        case FLOW:
        case WATER:
        case DOCK1:
        case DOCK2:
        case DOCK3:
          //First 4 are first frame, second 4 are second frame
          if( worldframe >= 0 && worldframe <= 3 ){
            gb.display.drawBitmap( (x*8 - dudex) + SCREEN_WIDTH/2 - 4, (y*8 - dudey) + SCREEN_HEIGHT/2 - 4, &tiles[tile*10] );
          }else{
            //All animated tiles have their variation one tile after it
            gb.display.drawBitmap( (x*8 - dudex) + SCREEN_WIDTH/2 - 4, (y*8 - dudey) + SCREEN_HEIGHT/2 - 4, &tiles[(tile+1)*10] );
          }
          break;
          
        default:
          gb.display.drawBitmap( (x*8 - dudex) + SCREEN_WIDTH/2 - 4, (y*8 - dudey) + SCREEN_HEIGHT/2 - 4, &tiles[tile*10] );
      } 
    }
  }
  //Draw player.  If moving and frames dictate it so, play walking animation
  if( player_moving && (dudeframe/2 == 0 || dudeframe/2 == 2) ){
    gb.display.drawBitmap(SCREEN_WIDTH/2-4,SCREEN_HEIGHT/2-4,player_sprites+((dudeframe/2)+dudeanimation*3)*10);
  }else{
    gb.display.drawBitmap(SCREEN_WIDTH/2-4,SCREEN_HEIGHT/2-4,player_sprites+(1+dudeanimation*3)*10);
  }
}

uint8_t test_world_collision(uint8_t dir){
  uint8_t tile = 0;
  if( dir == UP ){
    tile = world_get(((dudey-1)/8)*64+dudex/8);
    if( tile != DOOR && world_get(((dudey-1)/8)*64+(dudex+7)/8) )
      return world_get(((dudey-1)/8)*64+(dudex+7)/8);
    else
      return tile;
  }else if( dir == DOWN ){
    return world_get(((dudey+8)/8)*64+dudex/8) ||
      world_get(((dudey+8)/8)*64+(dudex+7)/8) != 0;
  }else if( dir == LEFT ){
    return world_get(((dudey)/8)*64+(dudex-1)/8) != 0 ||
      world_get(((dudey+7)/8)*64+(dudex-1)/8) != 0;
  }else{
    return world_get(((dudey)/8)*64+(dudex+8)/8) != 0 ||
      world_get(((dudey+7)/8)*64+(dudex+8)/8) != 0;
  }
}

void step_world(){
  player_moving = 0;
  
  dudeframe++;
  dudeframe%=7;

  worldframe++;
  worldframe%=8;
  
  if( gb.buttons.repeat(BTN_UP,1) ){
    uint8_t collision = 0;
    collision = test_world_collision(UP);
    if( collision == DOOR ){
      //Check whether we collided with a door based on our top left or top right
      collision = world_get(((dudey-1)/8)*64+dudex/8);
      //Depending on which, we set dungeon position to tile x/y of door.
      //This signals to the dungeon generator which dungeon we want to enter.
      uint8_t dungeonx,dungeony;
      if( collision == DOOR ){
        dungeonx = dudex/8;
        dungeony = ((dudey-1)/8);
      }else{
        dungeonx = (dudex+7)/8;
        dungeony = ((dudey-1)/8);
      }
      // Identify the dungeon we are entering
      for( uint8_t i = 0; i < NUM_DUNGEONS; i++ ){
        if( pgm_read_byte(&(dungeons[i].x)) == dungeonx && pgm_read_byte(&(dungeons[i].y)) == dungeony ){
          dungeonid = i;
          break;
        }
      }
      mode = TO_DUNGEON;
      transition = -SCREEN_HEIGHT/2;
      gb.display.persistence = true;
      dungeon_generated = 0;
      dungeon_level = 0;
      previous_level = -1;
      return;
    }
    if( !collision ){
      dudey--;
      dudeanimation = UP;
      player_moving = 1;
    }
  }
  else if(gb.buttons.repeat(BTN_DOWN,1) && !test_world_collision(DOWN)){
    dudey++;
    dudeanimation = DOWN;
    player_moving = 1;
  }
  if(gb.buttons.repeat(BTN_LEFT,1) && !test_world_collision(LEFT)){
    dudex--;
    dudeanimation = LEFT;
    player_moving = 1;
  }
  else if(gb.buttons.repeat(BTN_RIGHT,1) && !test_world_collision(RIGHT)){
    dudex++;
    dudeanimation = RIGHT;
    player_moving = 1;
  }

  if( player_moving ){
    try_combat();
  }
}

