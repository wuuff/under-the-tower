#include "dialogue.h"
#include "battle.h"

const uint8_t huff_tree[][3] PROGMEM = {
{255,1,24,},
{255,2,15,},
{255,3,4,},
{'E',0,0,},
{255,5,14,},
{255,6,7,},
{'Y',0,0,},
{255,8,13,},
{255,9,12,},
{255,10,11,},
{'J',0,0,},
{'?',0,0,},
{'V',0,0,},
{'G',0,0,},
{'I',0,0,},
{255,16,19,},
{255,17,18,},
{'O',0,0,},
{'S',0,0,},
{255,20,23,},
{255,21,22,},
{'D',0,0,},
{'L',0,0,},
{'H',0,0,},
{255,25,46,},
{255,26,33,},
{255,27,28,},
{'A',0,0,},
{255,29,30,},
{'U',0,0,},
{255,31,32,},
{'F',0,0,},
{'C',0,0,},
{255,34,41,},
{255,35,36,},
{'\x00',0,0,},
{255,37,38,},
{'P',0,0,},
{255,39,40,},
{'K',0,0,},
{'B',0,0,},
{255,42,43,},
{'N',0,0,},
{255,44,45,},
{'M',0,0,},
{'W',0,0,},
{255,47,52,},
{255,48,49,},
{'T',0,0,},
{255,50,51,},
{'\n',0,0,},
{'R',0,0,},
{' ',0,0,},
};

const uint8_t dialogue[] PROGMEM = {
0xc7,0x35,0xf3,0x9e,0x13,0x9a,0xeb,0xb0,0x87,0x62,0xe8,0x5c,0x60,0x5e,0xa2,0x1a,0x19,0xae,0xc9,0xf,0x89,0xaf,0x53,0x60,0xb9,0xa,0x1e,0x2f,0xdc,0x9a,0x36,0xbd,0x62,0x61,0xae,0xe6,0x5b,0xf8,0xae,0x85,0x47,0x3b,0x6b,0xe3,0x8f,0x89,0x78,0xdd,0x2f,0x73,0x68,0xf8,0xe3,0xd4,0x89,0xbd,0x75,0x9e,0xa,0x8b,0x16,0x3a,0x5b,0x5e,0xe9,0x33,0xcc,0xd8,0xc5,0xf5,0xc9,0xaf,0x8e,0x3e,0xcc,0xa8,0xdd,0x31,0xc1,0x3c,0x6c,0x7a,0xd6,0x4b,0xed,0xaf,0xb,0xee,0x93,0x1b,0x1b,0xac,0xb4,0xc7,0x35,0xe6,0xbe,0x2b,0xa4,0xb3,0x5d,0x2c,0x3a,0x4d,0xf1,0xc2,0x8d,0x7c,0x78,0xce,0xd3,0x2a,0x16,0x92,0xb3,0x6,0xfe,0x38,0xf8,0x97,0x8d,0xd0,0xfb,0xc1,0x51,0xd2,0xba,0x8d,0x95,0xc,0xd7,0x9b,0x69,0x77,0x89,0xa3,0x7a,0xe4,0x49,0x6f,0xad,0x63,0x6b,0x68,0x7d,0xe0,0xa8,0xf1,0xf2,0x16,0xb6,0xbe,0x3c,0x67,0xbc,0xda,0xdf,0x54,0x13,0x5e,0x3b,0xca,0xcc,0xd8,0x64,0xc8,0xd6,0x52,0xbc,0xb3,0xcc,0x7b,0x5c,0xe4,0x49,0x6b,0xdd,0x25,0xcf,0x56,0xd0,0xa8,0xe7,0xaf,0x3b,0xa2,0x8f,0x79,0xa8,0x69,0x28,0xa0,0x56,0xf8,0xe3,0xcf,0x19,0x54,0x5f,0xaf,0x1e,0xa6,0xc4,0xe3,0xa4,0xda,0xec,0x13,0xc3,0x5,0xa7,0x14,0x8e,0x59,0xed,0xbc,0xd7,0xb8,0x6b,0x35,0xeb,0xa4,0xac,0xcf,0x79,0xe3,0x9d,0xa9,0x36,0xc0,0xee,0x37,0xe2,0xcc,0xd7,0xaf,0xb3,0xb1,0x7d,0xc6,0xfe,0x26,0xbb,0x8d,0xf9,0xa3,0x1c,0x6e,0x98,0xe3,0xcf,0x19,0x54,0x5f,0xae,0xd3,0xb,0xec,0x9b,0xc7,0xa1,0x12,0x5d,0x91,0xb1,0xf1,0x35,0xce,0xd8,0x37,0x30,0xd8,0xe7,0x6d,0x7b,0x89,0xeb,0xc9,0x4e,0xc1,0x54,0xa6,0x98,0xf1,0x6a,0xdc,0x89,0x2a,0x1f,0xbe,0x17,0xc4,0xdb,0x83,0x66,0xbc,0xc9,0xbf,0x71,0x3b,0x4e,0x61,0x4b,0x89,0xe6,0x8c,0x71,0xbe,0xd3,0x2a,0x17,0x5e,0x33,0xe3,0x8e,0xc4,0x9e,0xb2,0xeb,0xe2,0x7c,0x71,0xd5,0x25,0x8f,0x43,0xba,0xad,0x85,0x53,0x2a,0x3d,0x79,0x66,0xbd,0x92,0xfe,0x44,0x97,0xba,0x4b,0x9a,0xf5,0x42,0xaf,0xb8,0x9f,0x2,0xe5,0x2f,0xd,0x6f,0x62,0x58,0x6b,0x9f,0x57,0x86,0xb7,0x94,0x21,0xdb,0x5c,0x89,0x2e,0x76,0xf5,0xe3,0x31,0xa2,0x8d,0x35,0xc1,0x6d,0x7c,0x79,0x16,0xbd,0xd1,0xac,0xd7,0x9a,0x31,0xc6,0xfc,0x57,0x42,0xa2,0x97,0xba,0x72,0xd0,0x2f,0xc7,0x1b,0x5,0x34,0x3f,0x17,0x73,0xb3,0x5,0x7c,0xc,0xd7,0x20,0xce,0x7e,0x16,0xb6,0xbd,0xc9,0xb1,0xd2,0x6e,0x44,0x95,0x2e,0x27,0xd,0x60,0x5c,0xd7,0x64,0x48,0xb7,0xc1,0xbe,0x6b,0xaf,0x58,0xd9,0x68,0xaa,0xa0,0xcf,0x88,0x94,0x57,0x1e,0xb5,0x92,0xf5,0xe9,0x36,0xba,0x89,0xf6,0x31,0x7e,0x38,0x26,0xbd,0xf1,0x6c,0xee,0x6c,0x60,0xb5,0x2a,0x68,0x85,0x1c,0xb4,0xf8,0x9a,0xf8,0xe3,0xd7,0x32,0xfa,0xb9,0xd5,0xae,0x76,0xf8,0xe3,0xbc,0x6e,0xba,0x6e,0x98,0xe6,0xbd,0x5c,0xea,0xe6,0xba,0xf7,0xb8,0xd8,0xee,0x6b,0xae,0xc8,0x91,0x6f,0x83,0x7c,0xd6,0x8a,0xe3,0xdf,0xb,0xe3,0xda,0x5b,0x51,0xaf,0x19,0xf1,0xc7,0x9c,0xf0,0x9a,0xee,0x8b,0x51,0xe4,0x37,0xde,0xe2,0xd4,0x57,0x1e,0x64,0x95,0x99,0xaf,0x1d,0x44,0xfb,0x19,0xf1,0x35,0xf1,0xc7,0xa9,0xb0,0x5c,0x85,0x31,0xe2,0xd5,0xb9,0x12,0x5a,0x3f,0x74,0x97,0x3e,0xc6,0x4b,0x76,0xf8,0x9a,0xf8,0xe3,0xba,0x2d,0x47,0x90,0xda,0x63,0x8e,0xe2,0x19,0xd8,0x93,0xe2,0x6f,0x5d,0xe1,0x79,0x69,0x61,0xee,0x86,0x51,0xc7,0xba,0x18,0x3e,0x38,0xf5,0x36,0xb,0x90,0xd7,0x8b,0x33,0x9f,0xba,0x4b,0x9a,0xf3,0x1d,0x99,0xd2,0x59,0xef,0x72,0x52,0xf1,0xef,0x36,0xb7,0xb8,0x6d,0x5a,0xe4,0x49,0x7d,0x8c,0x96,0xed,0xf1,0xc6,0xc5,0xf,0xb1,0x3d,0x93,0x3e,0x6e,0x4b,0x9a,0xe4,0x49,0x7a,0xf2,0xce,0x7d,0xe0,0xa8,0xd7,0xb2,0x79,0xdd,0xe,0x71,0x4c,0x71,0xdd,0x16,0xa3,0xc8,0x6e,0xb9,0xaf,0xb2,0x6f,0x1e,0x98,0xe6,0xbe,0xa6,0xc4,0xe3,0x9a,0xeb,0xce,0xf0,0x8b,0x4b,0xde,0x33,0xbc,0x2f,0x71,0xae,0xc4,0xb0,0x29,0xa2,0xa7,0x22,0x4b,0x85,0x9e,0x2a,0xc,0xa5,0xee,0x4f,0x1b,0x1c,0x89,0x2d,0x76,0x21,0xd8,0xbf,0x8e,0x6a,0x52,0x92,0xdf,0x2f,0x62,0x33,0xb4,0x43,0x6,0xf5,0xee,0x86,0xf,0x16,0xe9,0x34,0xc3,0x74,0x3f,0x3a,0x49,0xac,0xf6,0x4c,0xfb,0xa,0x6b,0x94,0xc7,0x1e,0xa6,0xc1,0x72,0x1a,0xe6,0xbd,0x6a,0xd8,0x86,0x1d,0x8b,0xa4,0x7b,0x8d,0x5e,0x2a,0xa1,0xe7,0xbe,0x17,0xa5,0x9a,0x4d,0x79,0x93,0x7f,0x1c,0x7a,0x91,0x37,0x42,0x24,0xbd,0xc9,0x65,0xc1,0xba,0x5e,0x3d,0xd2,0x5c,0xe5,0xa7,0xc4,0xf8,0xe3,0x5f,0x12,0xf1,0xbf,0x89,0xe7,0x4b,0x4d,0xb4,0xb6,0x6b,0xe3,0x8e,0xd1,0xc,0x1b,0xc7,0x35,0xf8,0x97,0x8d,0xf3,0x5d,0x76,0x45,0x8b,0x1b,0x49,0x2d,0x2f,0x1e,0xe9,0x2e,0x7a,0xe3,0xac,0xb6,0x35,0xef,0x1e,0x36,0x3e,0xc4,0x30,0x94,0x54,0xf8,0xe1,0x47,0x8d,0x8d,0x7c,0x71,0xe2,0xd8,0xbc,0xf5,0xef,0x36,0xb7,0xcf,0xb9,0x2b,0xd0,0x89,0x2f,0x79,0xb5,0xbe,0xa8,0x26,0xbc,0xc9,0xbe,0x44,0x96,0xfc,0xfb,0x3b,0x82,0xd2,0xf7,0x8c,0xf3,0xec,0xee,0xa,0x53,0xae,0x7e,0x2e,0xf3,0xb4,0x45,0x8e,0xc5,0xeb,0xe3,0x8f,0x39,0xe1,0x28,0x44,0x97,0x8d,0x8d,0x76,0x5,0xcd,0xa1,0xe,0xc5,0xf3,0xca,0x1e,0x73,0x5e,0xc4,0xb0,0xa1,0x12,0x5e,0x36,0x3b,0x44,0x30,0x6f,0x5e,0xc9,0x7f,0xba,0x4c,0x6c,0x6e,0xb5,0x1a,0x21,0x9f,0x1c,0x7a,0x82,0x54,0xd1,0xaf,0x16,0x67,0x3f,0x79,0xb5,0xba,0xf0,0xc2,0xa6,0xa3,0x91,0x25,0x4b,0x26,0xbb,0x46,0x7c,0x71,0xea,0x9,0x53,0x46,0xbb,0x4,0xe6,0xc1,0xf1,0xc1,0xef,0xcd,0x18,0x29,0x16,0x67,0x54,0xf7,0x9e,0x3f,0xc7,0x1a,0xf3,0x9e,0x13,0x9d,0xbe,0x38,0x3d,0xeb,0xbc,0x59,0x8b,0x43,0xc5,0xf3,0x4b,0x25,0xb1,0xdb,0x4,0xd7,0x3b,0x7c,0x71,0xde,0x2c,0xc5,0xe9,0x36,0xbc,0x75,0x3b,0x16,0xd1,0xee,0x93,0x1b,0x1b,0xad,0x4b,0xde,0x33,0xb0,0xd9,0xf1,0xc1,0x3c,0xee,0x88,0xa0,0xa6,0x98,0xf1,0x9c,0xd7,0xc5,0x93,0x1c,0x6f,0xae,0x26,0xc9,0x4b,0xc3,0x67,0x4b,0x87,0xc4,0xf8,0xe3,0x5e,0x63,0x2d,0xf0,0xec,0x5f,0xaf,0x1b,0xa1,0xf8,0xbb,0xe3,0x8f,0x89,0x57,0x98,0xcb,0x7c,0x1b,0xa4,0xc6,0x5b,0xe7,0xb8,0x52,0xe2,0x79,0xf6,0x2f,0xef,0xb,0xaf,0x74,0xb0,0xec,0x61,0x9e,0x2c,0xcd,0x7c,0x8a,0xc2,0xde,0xe2,0x75,0x73,0xaa,0x87,0xe2,0xef,0x3c,0x55,0x90,0x76,0xf6,0x4b,0xe9,0x8f,0x16,0xad,0xc8,0x92,0xf3,0x26,0xf5,0xd7,0x12,0xaa,0x8e,0xc5,0xfc,0x71,0x76,0x39,0xaf,0xbe,0x36,0x1d,0x24,0xa3,0x9a,0xeb,0xcd,0x26,0xb7,0xa4,0xdf,0x71,0x8b,0xae,0xe1,0xb5,0x53,0x1c,0x7a,0xe6,0x59,0x61,0x73,0xee,0x33,0x5c,0x15,0x1b,0xed,0x11,0x52,0xf4,0x96,0x52,0xf7,0x17,0xeb,0xe3,0xa2,0x8f,0xb8,0xc5,0xd7,0x59,0xe3,0x61,0x9e,0xe1,0x4d,0x9c,0xef,0xd6,0xc9,0x5d,0x75,0xda,0x65,0x47,0x71,0xb1,0x43,0xf1,0x77,0x2a,0x36,0x4f,0xb3,0x9d,0xe8,0x7f,0x1c,0xed,0x5b,0xdd,0x4,0xae,0x35,0xf1,0xe3,0x3d,0xf0,0xbe,0x35,0xeb,0x9e,0x7b,0xa5,0x3b,0xd1,0x52,0xe0,0x96,0x1d,0x71,0x1a,0x35,0xee,0x27,0xbe,0x36,0x16,0x98,0xe0,0x9e,0x36,0x39,0xdb,0x5f,0x1e,0x33,0xdf,0x1b,0xe,0x92,0x51,0x4c,0x78,0xb5,0x65,0xf3,0x26,0xf5,0xcb,0x19,0x87,0x62,0xfe,0x38,0xbb,0x5e,0xbc,0x4f,0x5a,0x20,
};

uint16_t huff_index = 0;
uint8_t huff_tree_index = 0;
uint8_t huff_mask = 0;

uint8_t huff_tree_get(uint8_t item){
  return pgm_read_byte((uint8_t*)&huff_tree[huff_tree_index][item]);
}

void fill_dialogue_buffer(uint16_t seek_index){
  uint8_t tmp, offset = 0;
  while( true ){
    tmp = pgm_read_byte((uint8_t*)&dialogue[huff_index]);
    //Read a single bit
    if( (tmp & huff_mask) == 0 ){
      // If bit was zero, go to left node
      huff_tree_index = huff_tree_get(1);
    }else{
      // If bit was one, go to right node
      huff_tree_index = huff_tree_get(2);
    }
    //If we are at a leaf node, we have a complete code
    tmp = huff_tree_get(0);
    if( tmp != 255 ){
      // If we're still seeking to our desired start location
      if( seek_index > 0 ){
        seek_index--;
      }else{
        combat_message[offset++] = tmp;
        //If the character we just read was a zero byte, we are done loading the buffer
        if( tmp == '\0' ){
          return;
        }
      }
      huff_tree_index = 0;// Return to root
    }
    //Advance to next bit
    huff_mask >>= 1; //Shift mask
    if( huff_mask == 0 ){
      //If mask has read every bit, it's time to shift to the next byte
      huff_index++;
      huff_mask = 0x80;
    }
  }
}

void display_dialogue(uint16_t index, uint8_t len, uint8_t who, const char name_list[][8]){
  meta_mode = mode;
  dialogue_index = index;
  dialogue_remaining = len;
  copy_to_buffer(who,name_list);
  huff_mask = 0x80;
  huff_index = 0;
  huff_tree_index = 0;
  // Seek to index (from start!) and
  // fill dialogue buffer with first set of dialogue
  fill_dialogue_buffer(dialogue_index);
  mode = DIALOGUE;
}

uint16_t dialogue_index;
uint8_t dialogue_remaining;

void step_dialogue(){
  worldframe++;
  worldframe%=8;
  gb.display.setColor(WHITE);
  gb.display.fillRect(0,SCREEN_HEIGHT/2-1,SCREEN_WIDTH,SCREEN_HEIGHT/2+1);
  gb.display.setColor(BLACK);
  gb.display.drawRect(0,SCREEN_HEIGHT/2-1,SCREEN_WIDTH,SCREEN_HEIGHT/2+1);
  
  gb.display.cursorX = 1;
  gb.display.cursorY = SCREEN_HEIGHT/2;
  //If the first char is a zero, then no character is speaking, so skip this
  //so that narration gets four lines to work with
  if( combat_buffer[0] != 0 ){
    gb.display.println(combat_buffer);//Display name of speaker, set before this
  }
  gb.display.cursorX = 4;
  gb.display.print(combat_message);

  if(gb.buttons.pressed(BTN_A)){
    gb.sound.playOK();
    if( dialogue_remaining == 0 ){
      // If dialogue is done, return to world mode
      mode = meta_mode;
    }else{
      // If dialogue is not done, move to next chunk of text
      dialogue_remaining--;
      // This time we fill the dialogue buffer we will start from the end of the
      // previous dialogue
      fill_dialogue_buffer(0);
    }
  }
}

